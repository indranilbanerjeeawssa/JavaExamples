AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  application_loadbalancer_event_consumer_function

  Sample SAM Template for application_loadbalancer_event_consumer_function

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20
    MemorySize: 128

Resources:
  ApplicationLoadBalancerForLambdaTargetFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: application_loadbalancer_event_consumer_function
      Handler: com.amazonaws.services.lambda.samples.events.application.loadbalancer.HandlerApplicationLoadbalancer::handleRequest
      FunctionName: java-application-loadbalancer-consumer-dynamodb-sam 
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          DYNAMO_DB_TABLE: !Ref ApplicationLoadbalancerDynamoDBTable
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1 # More info about tiered compilation https://aws.amazon.com/blogs/compute/optimizing-aws-lambda-function-performance-for-java/
      Policies:
      - Statement:
        - Sid: DynamoDBPermissionsPolicy
          Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
          - dynamodb:PutItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:BatchWriteItem
          - dynamodb:BatchGetItem
          - dynamodb:DescribeTable
          - dynamodb:ConditionCheckItem
          Resource: 
          - !Join ['', ["arn:", "aws:", "dynamodb:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", "table/", !Ref ApplicationLoadbalancerDynamoDBTable]]
          - !Join ['', ["arn:", "aws:", "dynamodb:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", "table/", !Ref ApplicationLoadbalancerDynamoDBTable, "/index/*"]]
  ApplicationLoadBalancerTargetFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ApplicationLoadBalancerForLambdaTargetFunction.Arn
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com
  ApplicationLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ApplicationLoadBalancerForLambdaSecurityGroup
      GroupDescription: Allow http on port 80 for ALB with Lambda Function Target
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref CIDRForALB
  ApplicationLoadBalancerForLambda:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing 
      IpAddressType: ipv4
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3      
      SecurityGroups:
        - !Ref ApplicationLoadBalancerSecurityGroup
  ApplicationLoadBalancerForLambdaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ApplicationLoadBalancerTargetFunctionPermission
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt ApplicationLoadBalancerForLambdaTargetFunction.Arn
  ApplicationLoadBalancerForLambdaHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancerForLambda
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - FixedResponseConfig:
            StatusCode: 403
            ContentType: text/plain
            MessageBody: Incorrect request
          Type: fixed-response
  ApplicationLoadBalancerForLambdaHttpListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ApplicationLoadBalancerForLambdaTargetGroup
                Weight: 1
      Conditions: 
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /customers
        - Field: http-request-method
          HttpRequestMethodConfig:
            Values:
              - POST
      ListenerArn: !Ref ApplicationLoadBalancerForLambdaHttpListener
      Priority: 1
  
  ApplicationLoadbalancerDynamoDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: ApplicationLoadbalancerDynamoDBTableJava
      PrimaryKey:
        Name: CustomerID
        Type: String
Parameters:
  VpcId:
    Type: String
    Description: The VPC where the security group for the Load Balancer will be set-up
  Subnet1:
    Type: String
    Description: The first of the three private subnets in the DocumentDB cluster's VPC
  Subnet2:
    Type: String
    Description: The second of the three private subnets in the DocumentDB cluster's VPC
  Subnet3:
    Type: String
    Description: The third of the three private subnets in the DocumentDB cluster's VPC
  CIDRForALB:
    Type: String
    Description: The CIDR range from where to allow traffic into the ALB on port 80
Outputs:
  ApplicationLoadBalancerForLambdaTargetFunction:
    Description: "ApplicationLoadBalancerForLambdaTargetFunction Lambda Function ARN"
    Value: !GetAtt ApplicationLoadBalancerForLambdaTargetFunction.Arn